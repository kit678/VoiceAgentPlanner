## Behavioral Guidelines:

### Question Scope
Focus questions on feature scope, tech stack, APIs, security, compliance, or deployment. Avoid business metrics, ROI, personal productivity tools, or developer skills unless raised by the user.

### Brevity
Keep every chat response under 100 words. Use short, direct sentences. No background fluff.

### 95% Confidence Guard
Do not change code until clarifying questions yield 95% confidence.

### Refactor Guard (500 LOC)
If any source file exceeds 500 lines, stop and propose a refactor before coding.

### Error Handling & Manual Actions
If any instructed step is impossible, or for MCP server installation failures or any un-automatable steps, append details to `MANUAL_ACTIONS.md`.

### Git Workflow via MCP
Use the *github* MCP server for all Git actions. Commit messages must follow Conventional-Commit (feat:, fix:, chore:, etc.). Bundle Memory-Bank edits with the motivating code. Fallback to local git only if the server is down.

## Memory Bank Update Moments
ALWAYS touch memory-bank files at these times:

1.  **After a task is marked Done:** Review and update relevant memory bank files to reflect the completed work (e.g., `progress.md`, `TASK.md`, `architecture.md` if applicable)
2.  **Before starting a new feature or significant task:** Ensure `PRD.md` is up-to-date or has questions noted, and `TASK.md` reflects the new work item
3.  **Upon specific user commands:**
    *   When the user types "sync memory bank": Perform a comprehensive review and update of all `memory-bank/` files, ensuring consistency and removing redundancy. This involves checking `activeContext.md` and recent conversation/activity to identify and update relevant files. This process prioritizes context-driven updates over a full interactive audit of all files
    *   When the user indicates a desire to move on (e.g., types "lets move on", "what's next?", or similar phrases indicating a transition): The agent should proactively review `activeContext.md` and recent conversation/activity to identify and suggest updates to relevant memory bank files to ensure they are fresh and consistent before proceeding to the next topic or task. This prioritizes context-driven updates
4.  **Implicitly at natural conversation breaks or context shifts:** When the conversation naturally shifts to a new topic, or a sub-task is completed, the agent should consider if any memory bank files need updating based on the preceding discussion

## Enhanced Plan Mode Workflow:
**When user types "Enter Plan Mode", the agent MUST:**
1.  **Load Memory Bank Context:** Review all memory-bank files for current project state
2.  **Analyze Current Status:** Identify completion percentages and critical blockers
3.  **Provide Focused Session Starter:** Present a concise summary including:
    *   Current completion status (e.g., "Voice pipeline: âœ… Complete, Command processing: ðŸŸ¡ Basic")
    *   Top 3 critical blockers requiring immediate attention
    *   Suggested session focus based on dependencies and priority
    *   Quick confirmation: "Ready to tackle [specific priority]?"
4.  **Await User Confirmation:** Wait for user to confirm focus area before proceeding

## Intent-Driven Workflow and Documentation Triggers:
**Upon receiving a new user prompt/instruction, the Plan Mode agent MUST:**
1.  **Identify User Intent(s):** Analyze the user's input to determine the primary intent(s). Examples include, but are not limited to:
    *   `Feature Request`: User wants to add new functionality
    *   `Bug Fix`: User wants to correct an issue in existing functionality
    *   `Code Refactor`: User wants to improve existing code structure/quality without changing behavior
    *   `New Component Creation`: User wants to create a new file, class, module, or UI element
    *   `Documentation Update`: User explicitly asks to update or create documentation
    *   `Architecture Change`: User proposes a change to the system's architecture
    *   `Dependency Management`: User wants to add, remove, or update project dependencies
    *   `Clarification/Question`: User is asking for information or clarification
    *   `Task Management`: User is interacting with tasks (e.g., creating, assigning, updating status)

2.  **Trigger Actions Based on Intent:** Based on the identified intent(s), perform the following actions, including timely documentation updates:

    *   **If Intent is `Feature Request`:**
        *   **Action:** Discuss requirements, scope, and impact
        *   **File Update Triggers (Post-Discussion/Pre-Coding):**
            *   `PRD.md`: Add/update functional requirements, or add to "## Unanswered Questions"
            *   `TASK.md`: Add new task(s) to Backlog
        *   **File Update Triggers (Post-Implementation):**
            *   `progress.md`: Log completed feature
            *   `architecture.md`: If new libraries/services were added or architecture significantly impacted

    *   **If Intent is `Bug Fix`:**
        *   **Action:** Gather details about the bug, reproduction steps, and expected behavior
        *   **File Update Triggers (Pre-Coding):**
            *   `TASK.md`: Add bug fix task to Backlog/In-Progress
        *   **File Update Triggers (Post-Implementation):**
            *   `progress.md`: Log completed bug fix

    *   **If Intent is `Code Refactor`:**
        *   **Action:** Discuss scope and goals of the refactor
        *   **File Update Triggers (Post-Implementation):**
            *   `progress.md`: Log completed refactor
            *   `architecture.md`: If the refactor leads to new architectural decisions

    *   **If Intent is `New Component Creation`:**
        *   **Action:** Discuss the component's purpose, interface, and interactions
        *   **File Update Triggers (Post-Discussion/Pre-Coding):**
            *   `TASK.md`: Add task for component creation
        *   **File Update Triggers (Post-Implementation):**
            *   `architecture.md`: If the new component significantly impacts overall design or introduces new patterns/dependencies
            *   `progress.md`: Log component creation

    *   **If Intent is `Documentation Update` (explicit request):**
        *   **Action:** Identify the specific document(s) and content to be updated/created
        *   **File Update Trigger:** The specified `memory-bank/` file(s) or other documentation files

    *   **If Intent is `Architecture Change`:**
        *   **Action:** Discuss the proposed changes, rationale, and implications
        *   **File Update Triggers (Post-Decision):**
            *   `architecture.md`: Update diagrams and add/update ADR
            *   `TASK.md`: Create tasks for implementing the architectural change

    *   **If Intent is `Dependency Management`:**
        *   **Action:** Discuss the dependency to be added, removed, or updated
        *   **File Update Triggers (Post-Action):**
            *   `architecture.md`: Update technology stack with new/removed/updated dependencies
            *   Relevant package manager files (e.g., `package.json`, `requirements.txt`) - *Agent will propose changes to these files directly*

    *   **If Intent is `Clarification/Question` or `Task Management`:**
        *   **Action:** Address the question or perform the task management operation
        *   **File Update Triggers:** `TASK.md` if task status changes. If clarification leads to a new requirement, treat as `Feature Request`

3.  **Confirm and Proceed:** Before making significant file updates or starting coding, briefly confirm the identified intent and planned actions/updates with the user, especially if the intent is ambiguous

## Documentation Management (memory-bank/) - General Principles:

*   **Contextual Awareness:** Before detailed follow-ups in clarification phases, or when starting a new planning session, ensure full context by reading all files in `memory-bank/`
*   **PRD Handling:** `PRD.md` is central to defining scope
    *   **Coding Prerequisite:** Do not write or modify source code until `PRD.md` contains at least one "### Requirement"
*   **Session Focus (`activeContext.md`):** At the start of each working session, overwrite `activeContext.md` with the day's focus
*   **Task & Progress Tracking (`TASK.md`, `progress.md`):** These files are updated based on task lifecycle events, primarily driven by intents like `Feature Request`, `Bug Fix`, etc.
*   **Technical Documentation (`architecture.md`):** Updates are triggered by specific intents like `Feature Request`, `New Component Creation`, `Architecture Change`, and `Dependency Management` when they impact the system's design or technical landscape

## Project Lifecycle Phases:

### 1. Kick-off / Clarification:
*   **Initial Question:** Always start by asking: "Is this project UI-heavy, minimal/headless, or UI already exists?"
*   **Requirement Gathering (5 Ws):** Ask clarifying questions (Who, What, When, Where, Why) until no items remain under "## Unanswered Questions" in `PRD.md`
*   **PRD Handling (Existing Code-bases):**
    *   If PRD.md already exists: Read it, summarise existing requirements in â‰¤40 words, never overwriteâ€”append ONLY under a new heading "## Unanswered Questions"
    *   If PRD.md is missing, create it and add an "## Unanswered Questions" section

### 2. Bootstrap (One-time Setup):
*   **Rules File (`.cursorrules`):** If missing, generate it. If exists, append stack-specific rules below "# --- tech-addon ---"
*   **MCP Server Installation:** Install MCP servers from `.cursor/mcp.json`; log failures to `MANUAL_ACTIONS.md`
*   **Core File Check:** Ensure Memory-Bank core files + `TASK.md` exist
*   **Proceed Confirmation:** Pause and ask "Ready to code?" before editing source

### 3. Working Phase (Development):
*   **Session Start:** At session start, overwrite `activeContext.md` with today's focus
*   **Task Execution:** For each task, ask questions until 95% confident, then say "Ready to apply"
*   **Code Implementation:** Write code + success/edge/failure tests; commit via GitHub MCP (Conventional-Commit)
*   **Documentation Updates:** Update `TASK.md` and `progress.md`; update `architecture.md` diagrams and ADRs when tech decisions change
*   **Context Updates:** Log manual steps to `MANUAL_ACTIONS.md`
*   **Refactor Policy:** Refactor any file >500 LOC before continuing

## User-Triggered Commands:

### "sync memory bank":
*   **Action:** Audit all `memory-bank/` files, delete redundant content, and commit

### "Enter Plan Mode":
*   **Action:**
    1.  Read every file in `memory-bank/`
    2.  Summarise `activeContext.md` in â‰¤ 30 words
    3.  Open `PRD.md` and collect unanswered items from the "Open Questions" list
        *   If unanswered items exist âžœ ask those first (5 Ws style)
        *   If PRD is complete âžœ ask: "What would you like to plan next (feature, bug-fix, daily tasks)?"
    4.  Do NOT write or modify source code during this command
    5.  Use â‰¤ 100 words, bullet-points preferred
